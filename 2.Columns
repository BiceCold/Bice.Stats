#function for geometric mean
Bice.GeometricMean<-function(x) {
  prod(x)^(1/length(x))
meanlogx<-sum(log(x))/length(x)
meanlogx
}

#function for natural anti log
Bice.NaturalAntiLog<-function(x) {
  prod(x)^(1/length(x))
  meanlogx<-sum(log(x))/length(x)
  exp(meanlogy)
  geometric(x)
}

#function for harmonic mean
Bice.HarmonicMean<-function(x) {
  length(x)/sum(1/x)
}

#function for arithmetic mean
Bice.ArithmeticMean<-function(x) {
  sum(x)/length(x)
}

#function to show all means in a summary
Bice.Summary<-function(x) {
 Bice.Titles<-c("Geometric Mean","Natural Anti Log","Harmonic Mean","Arithmetic Mean")
 Bice.Vaules<-c(Bice.GeometricMean(x),Bice.NaturalAntiLog(x),Bice.HarmonicMean(x),Bice.ArithmeticMean(x))
 Bice.Array<-array(c(Bice.Titles,Bice.Vaules), dim = c(length(Bice.Titles),2))
 print(Bice.Array)
}

#function to find degrees of freedom
Bice.DegreesOfFreedom<-function(x) {
  length(x)-1
}

#Variance Ratio Formula Using Means x and y
Bice.VarianceRatio<-function(x,y) {
  if(x>(4*y))     print("Variance is significant")
  else if(y>(x*4)) print("Variance is significant")
  else            print("variance is not significant")
}


#fetches the critical value of F
Bice.CriticalF<-function(x,y,data.z){
  Bice.LM <- lm(x~y, data = data.z)
  Bice.Anova <- anova(Bice.LM)
  CF<-qf(1-.05, Bice.Anova[1,1], Bice.Anova[2,1])
  print(CF)
}


#Gets the SST of 2 vectors
Bice.SST <- function(x, y) {
    n.y<-length(y)
    sum.squared.y <- sum(y ^ 2)
    sum.y <- sum(y)
    SST <- sum.squared.y - (sum.y ^ 2 / n.y)
    SST
}

#Gets the SSXY of 2 vectors

Bice.SSXY <- function(x, y) {
    sum.combo <- sum(y * x)
    sum.y <- sum(y)
    sum.x <- sum(x)
    n.y <- length(y)
    SSXY <- sum.combo - ((sum.y * sum.x) / n.y)
    SSXY
}

#Gets the SSX of 2 vectors

Bice.SSX <- function(x, y) {
    sum.x.squared <- sum(x ^ 2)
    sum.x <- sum(x)
    n.y <- length(y)
    SSX <- sum.x.squared - (sum.x ^ 2 / n.y)
    SSX
    }

#Gets the slope of the line related to the 2 vectors
Bice.Slope.ANCOVA <- function(x, y) {
    sum.combo <- sum(y * x)
    sum.y <- sum(y)
    sum.x <- sum(x)
    n.y <- length(y)
    SSXY <- sum.combo - ((sum.y * sum.x) / n.y)
    sum.x.squared <- sum(x ^ 2)
    SSX <- sum.x.squared - (sum.x ^ 2 / n.y)
    b <- SSXY / SSX
    b
}

#Gets the SSR of the 2 vectors

Bice.SSR <- function(x, y) {
    sum.combo <- sum(y * x)
    sum.y <- sum(y)
    sum.x <- sum(x)
    n.y <- length(y)
    SSXY <- sum.combo - ((sum.y * sum.x) / n.y)
    sum.x.squared <- sum(x ^ 2)
    SSX <- sum.x.squared - (sum.x ^ 2 / n.y)
    b <- SSXY / SSX
    SSR <- b * SSXY
    SSR
}

#Gets the SSE of 2 vectors

Bice.SSE <- function(x, y) {
    n.y <- length(y)
    sum.squared.y <- sum(y ^ 2)
    sum.y <- sum(y)
    SST <- sum.squared.y - (sum.y ^ 2 / n.y)
    sum.combo <- sum(y * x)
    sum.x <- sum(x)
    SSXY <- sum.combo - ((sum.y * sum.x) / n.y)
    sum.x.squared <- sum(x ^ 2)
    SSX <- sum.x.squared - (sum.x ^ 2 / n.y)
    b <- SSXY / SSX
    SSR <- b * SSXY
    SSE <- SST - SSR
    SSE
}
